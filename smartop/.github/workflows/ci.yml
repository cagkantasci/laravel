name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PHP_VERSION: '8.2'
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.13.0'

jobs:
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: smartop_test
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

      redis:
        image: redis:7.0
        ports:
          - 6379:6379
        options: >-
          --health-cmd="redis-cli ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql, redis
        coverage: xdebug

    - name: Cache Composer dependencies
      uses: actions/cache@v3
      with:
        path: vendor
        key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
        restore-keys: ${{ runner.os }}-composer-

    - name: Install Composer dependencies
      run: |
        cd smartop
        composer install --prefer-dist --no-progress --no-suggest --optimize-autoloader

    - name: Copy environment file
      run: |
        cd smartop
        cp .env.example .env

    - name: Generate application key
      run: |
        cd smartop
        php artisan key:generate

    - name: Configure environment
      run: |
        cd smartop
        echo "DB_CONNECTION=mysql" >> .env
        echo "DB_HOST=127.0.0.1" >> .env
        echo "DB_PORT=3306" >> .env
        echo "DB_DATABASE=smartop_test" >> .env
        echo "DB_USERNAME=root" >> .env
        echo "DB_PASSWORD=password" >> .env
        echo "REDIS_HOST=127.0.0.1" >> .env
        echo "REDIS_PORT=6379" >> .env
        echo "CACHE_DRIVER=redis" >> .env
        echo "QUEUE_CONNECTION=redis" >> .env

    - name: Run database migrations
      run: |
        cd smartop
        php artisan migrate --seed --force

    - name: Run PHPUnit tests
      run: |
        cd smartop
        php artisan test --coverage-clover=coverage.xml

    - name: Run PHP CS Fixer
      run: |
        cd smartop
        ./vendor/bin/php-cs-fixer fix --dry-run --diff

    - name: Run PHPStan
      run: |
        cd smartop
        ./vendor/bin/phpstan analyse

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./smartop/coverage.xml
        flags: backend
        name: backend-coverage

  test-frontend:
    name: Frontend Tests
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Cache Flutter dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.pub-cache
          smartop/mobile/.dart_tool
        key: ${{ runner.os }}-flutter-${{ hashFiles('**/pubspec.lock') }}
        restore-keys: ${{ runner.os }}-flutter-

    - name: Install Flutter dependencies
      run: |
        cd smartop/mobile
        flutter pub get

    - name: Analyze Flutter code
      run: |
        cd smartop/mobile
        flutter analyze

    - name: Run Flutter tests
      run: |
        cd smartop/mobile
        flutter test --coverage

    - name: Check Flutter formatting
      run: |
        cd smartop/mobile
        dart format --set-exit-if-changed .

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./smartop/mobile/coverage/lcov.info
        flags: frontend
        name: frontend-coverage

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'

    - name: PHP Security Checker
      run: |
        cd smartop
        curl -H "Accept: text/plain" https://security.symfony.com/check_lock > security_report.txt
        cat security_report.txt

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    needs: [test-backend, security-scan]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ env.PHP_VERSION }}
        extensions: mbstring, dom, fileinfo, mysql

    - name: Install Composer dependencies
      run: |
        cd smartop
        composer install --no-dev --optimize-autoloader

    - name: Create deployment artifact
      run: |
        cd smartop
        tar -czf ../smartop-backend.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=tests \
          --exclude=storage/logs \
          --exclude=storage/framework/cache \
          --exclude=storage/framework/sessions \
          --exclude=storage/framework/views \
          .

    - name: Upload backend artifact
      uses: actions/upload-artifact@v3
      with:
        name: smartop-backend
        path: smartop-backend.tar.gz

  build-mobile:
    name: Build Mobile App
    runs-on: ubuntu-latest
    needs: [test-frontend]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}

    - name: Install dependencies
      run: |
        cd smartop/mobile
        flutter pub get

    - name: Build APK
      run: |
        cd smartop/mobile
        flutter build apk --release

    - name: Build iOS (if on macOS)
      run: |
        cd smartop/mobile
        flutter build ios --release --no-codesign
      if: runner.os == 'macOS'

    - name: Upload APK artifact
      uses: actions/upload-artifact@v3
      with:
        name: smartop-mobile-apk
        path: smartop/mobile/build/app/outputs/flutter-apk/app-release.apk

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-backend, build-mobile]
    if: github.ref == 'refs/heads/develop'
    environment: staging

    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: smartop-backend

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging server..."
        # Add your staging deployment commands here
        # Example: rsync, ssh commands, or deployment tools

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build-backend, build-mobile]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
    - name: Download backend artifact
      uses: actions/download-artifact@v3
      with:
        name: smartop-backend

    - name: Deploy to production server
      run: |
        echo "Deploying to production server..."
        # Add your production deployment commands here
        # Example: Blue-green deployment, rolling updates, etc.

    - name: Notify deployment
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run load tests
      run: |
        # Add load testing commands here
        # Example: Apache Bench, JMeter, or k6
        echo "Running performance tests..."

  database-backup:
    name: Database Backup
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Create database backup
      run: |
        echo "Creating database backup..."
        # Add database backup commands here